#!/usr/bin/env node

//TODO use yargs auto completion feature!

var group_opt = {
  alias: 'group',
  describe: 'Name of the Autoscaling Group to create or update'
};

var lc_opt = {
  alias: 'launch-config',
  describe: 'Name of the Launch Configuration'
};

var tags_opt = {
  alias: 'instance-tags',
  describe: 'Tags to apply to instances launched from this ASG',
  array: true
};

function _regions(yargs) {
  return yargs
  .option('r', {
    alias: 'regions',
    describe: 'EC2 regions to operate in',
    array: true,
    choices: ['us-east-1', 'us-west-2', 'eu-west-1', 'ap-southeast-1']
  })
  .option('c', {
    alias: 'regions-config',
    describe: 'Region configuration JSON file'
  })
  .demand(['regions', 'regions-config']);
}

var argv = require('yargs')
  .usage('nemesys {command}')
  // commands

  .command('update', 'Update an EC2 resource', function(yargs, argv){
    yargs.command('asg', 'Update an Autoscaling Group with a new Launch Configuration', function(yargs, argv){
      yargs
      .option('g', group_opt)
      .option('l', lc_opt)
      .demand(['group', 'launch-config'])
      .example('nemesys update asg -g tracking_asg -l tracking_lc_2015_12_03 -r us-east-1 us-west-2',
        'Updates the launch config for an ASG called tracking_asg to be tracking_lc_2015_12_03 in us-east-1, us-west-2, and eu-west-1')
      .help('h')
      .alias('h', 'help');
    })
    .help('h')
    .alias('h', 'help');
  })

  .command('create', 'Create an EC2 resource', function(yargs, argv){
    yargs

    .command('asg', 'Create an Autoscaling Group', function(yargs, argv){
      _regions(yargs)

      .option('g', group_opt)
      .option('l', lc_opt)
      .option('t', tags_opt)
      .option('e', {
        alias: 'error-topic',
        describe: 'SNS topic to notify of ASG errors'
      })
      .demand(['group', 'launch-config'])
      .example('nemesys create asg -g tracking_asg -l tracking_lc -t Client=all -t Name=tracking-asg -t Task=tracking -e cq-pixel-error -r us-west-2',
        'Creates a new ASG in us-west-2 called tracking_asg with launch config tracking_lc, error topic "cq-pixel-error", and some tags')
      .help('h')
      .alias('h', 'help');
    })

    .command('sg', 'Create a Security Group', function(yargs, argv){
      _regions(yargs)

      .option('s', {
        alias: 'security-group',
        describe: 'Name of the Security Group'
      })
      .option('d', {
        alias: 'description',
        describe: 'Description of the Security Group'
      })
      .option('i', {
        alias: 'ingress-rules',
        description: 'Security Group ingress rules, in the format of {ip/group name}:{port}[:{protocol}]. Default protocol is tcp',
        array: true
      })

      .demand(['security-group'])
      .example('nemesys create sg -s ssh-access -c ~/x6/Automation/nemesys/regions.json -r ap-southeast-1',
        'Creates a security group in ap-southeast-1 called "ssh-access", using regions.json to discover the vpc to use');
    })

    .command('lc', 'Create a Launch Configuration', function(yargs, argv){
      _regions(yargs)

      .option('l', lc_opt)
      .option('a', {
        alias: 'ami',
        description: 'AMI name'
      })
      .option('i', {
        alias: 'instance-type',
        describe: 'EC2 API name of the instance type to use (ie, m3.large)'
      })
      .option('k', {
        alias: 'ssh-key-pair',
        describe: 'Name of the ssh key pair to use for instances using this Launch Configuration'
      })
      .option('I', {
        alias: 'iam-role',
        describe: 'IAM role for launched instances'
      })
      .option('s', {
        alias: 'security-groups',
        describe: 'Name of the Security Group(s) to apply to instances using this Launch Configuration',
        array: true
      })
      .option('u', {
        alias: 'user-data-files',
        describe: 'Shell script files to combine to form the user data',
        array: true
      })
      .option('region-user-data', {
        describe: 'Region-specific user data files, which will appear BEFORE all other user data in the resulting script. This must be in the same order as the regions passed in via --regions',
        array: true
      })
      .option('d', {
        alias: 'disks',
        describe: 'Disks to attach to instances using this Launch Configuration',
        array: true
      })

      .demand(['launch-config', 'ami', 'instance-type', 'ssh-key-pair'])
      .example('nemesys create lc', 'Creates a Launch Configuration');
    })

    .demand(2)
    .help('h')
    .alias('h', 'help');
  })

  .command('replace', 'Replace an existing EC2 resource with a new one', function(yargs, argv){
    yargs.command('asg', 'Replace an Autoscaling Group', function(yargs, argv){
      _regions(yargs)
      .option('g', group_opt)
      .option('l', lc_opt)
      .option('o', {
        alias: 'old-group',
        describe: 'Name of the Autoscaling Group to replace. Only applies to `replace` command'
      })
      .demand(['group', 'launch-config', 'old-group'])
      .example('nemesys replace -o tracking_asg_2015_12_03 -g tracking_asg_2015_12_04 -l tracking_2015_12_04_spot -r eu-west-1',
        'Replaces ASG tracking_asg_2015_12_03 with a new one called tracking_asg_2015_12_04, with launch config tracking_2015_12_04_spot')
        .help('h')
        .alias('h', 'help')
    })
    .demand(2)
    .help('h')
    .alias('h', 'help');
  })

  .demand(2)
  .help('h')
  .alias('h', 'help')
  .argv;

require('./cli/arg_handler').handle(argv);
